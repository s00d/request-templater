<% const { url, method, mimeType, headers, postData, cookies } = locals; %>
// Construct the request URL
NSString *fullUrl = @"<%- url %>";
NSMutableDictionary *headers = [NSMutableDictionary dictionary];
<% headers.forEach(header => { %>
    [headers setObject:@"<%= header.value %>" forKey:@"<%= header.name %>"];
<% }) %>
NSMutableDictionary *parameters = [NSMutableDictionary dictionary];
<% postData.forEach(param => { %>
<% if (Array.isArray(param.value)) { %>
    NSMutableArray *<%= param.name %>Array = [NSMutableArray array];
    <% param.value.forEach(arrayItem => { %>
    <% if (typeof arrayItem === 'object') { %>
    NSDictionary *<%= param.name %>Item = @{
    <% Object.keys(arrayItem).forEach(key => { %>
        @"<%= key %>": <%= JSON.stringify(arrayItem[key]) %>,
    <% }) %>
    };
    [<%= param.name %>Array addObject:<%= param.name %>Item];
    <% } else { %>
        [<%= param.name %>Array addObject:@"<%= arrayItem %>"];
    <% } %>
    <% }) %>
    [parameters setObject:<%= param.name %>Array forKey:@"<%= param.name %>"];
<% } else if (typeof param.value === 'object') { %>
    NSDictionary *<%= param.name %>Dict = @{
    <% Object.keys(param.value).forEach(key => { %>
        @"<%= key %>": <%= JSON.stringify(param.value[key]) %>,
    <% }) %>
    };
    [parameters setObject:<%= param.name %>Dict forKey:@"<%= param.name %>"];
<% } else { %>
    [parameters setObject:@"<%= param.value %>" forKey:@"<%= param.name %>"];
<% } %>
<% }) %>
NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:fullUrl]];
request.HTTPMethod = @"<%= method %>";
[request setValue:@"<%= mimeType %>" forHTTPHeaderField:@"Content-Type"];
for (NSString *key in headers) {
    [request setValue:headers[key] forHTTPHeaderField:key];
}
NSURLSessionConfiguration *config = [NSURLSessionConfiguration defaultSessionConfiguration];
NSURLSession *session = [NSURLSession sessionWithConfiguration:config];

if (parameters.count > 0) {
    NSError *jsonError;
    NSData *jsonData = [NSJSONSerialization dataWithJSONObject:parameters options:0 error:&jsonError];
    if (jsonError) {
        NSLog(@"Error converting parameters to JSON: %@", jsonError);
        return;
    }
    request.HTTPBody = jsonData;
}

NSHTTPCookieStorage *cookieStorage = [NSHTTPCookieStorage sharedHTTPCookieStorage];
<% cookies.forEach(cookie => { %>
NSDictionary *cookieProperties = @{
    NSHTTPCookieDomain: @"<%= cookie.domain %>",
    NSHTTPCookiePath: @"<%= cookie.path %>",
    NSHTTPCookieName: @"<%= cookie.name %>",
    NSHTTPCookieValue: @"<%= cookie.value %>",
};
NSHTTPCookie *cookie = [NSHTTPCookie cookieWithProperties:cookieProperties];
[cookieStorage setCookie:cookie];
<% }) %>

NSURLSessionDataTask *task = [session dataTaskWithRequest:request completionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {
if (error) {
    NSLog(@"Error: %@", error);
        return;
    }
    if ([response isKindOfClass:[NSHTTPURLResponse class]]) {
        NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *)response;
        if (httpResponse.statusCode == 200) {
            NSString *responseString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];
            NSLog(@"Response: %@", responseString);
        }
    }
}];
[task resume];
