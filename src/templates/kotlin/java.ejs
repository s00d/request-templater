<% const { url, method, mimeType, headers, postData, cookies } = locals; %>
import java.net.HttpURLConnection
import java.net.URL
import java.net.URLEncoder

val url = URL("<%= url %>")
val connection = url.openConnection() as HttpURLConnection
connection.requestMethod = "<%= method %>"

<% if (headers.length > 0) { %>
// Add headers to the request
<% headers.forEach(header => { %>
connection.setRequestProperty("<%= header.name %>", "<%= header.value %>")
<% }) %>
<% } %>

<% if (cookies.length > 0) { %>
// Add cookies to the request
<% cookies.forEach(cookie => { %>
connection.addRequestProperty("Cookie", "<%= cookie.name %>=<%= cookie.value %>")
<% }) %>
<% } %>

// Send the request
<%
if (postData.length > 0) {
  if (method === 'POST') {
%>
val postData = "<%= postData.map(param => {
  if (Array.isArray(param.value)) {
    const encodedValues = param.value.map(value => encodeURIComponent(value.toString(), 'UTF-8'))
    return encodedValues.map(value => param.name + '=' + value).join('&')
  } else if (typeof param.value === 'object') {
    const encodedValues = Object.values(param.value).map(value => encodeURIComponent(value.toString(), 'UTF-8'))
    const keys = Object.keys(param.value)
    return encodedValues.map((value, index) => param.name + '[' + keys[index] + ']=' + value).join('&')
  } else {
    return param.name + '=' + encodeURIComponent(param.value.toString(), 'UTF-8')
  }
}).join('&') %>".toByteArray(Charsets.UTF_8)
connection.setRequestProperty("Content-Type", "<%= mimeType %>")
connection.setRequestProperty("Content-Length", postData.size.toString())
connection.doOutput = true
connection.outputStream.write(postData)
<%
  } else {
%>
println("Error: GET method does not support POST data.")
<%
  }
} else {
%>
connection.connect()
<%
}
%>

// Handle the response
if (connection.responseCode == HttpURLConnection.HTTP_OK) {
  val response = connection.inputStream.bufferedReader().use { it.readText() }
  println("Response: $response")
} else {
  println("Error: ${connection.responseMessage}")
}
connection.disconnect()
