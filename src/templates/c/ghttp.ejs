<% const { url, method, mimeType, headers, postData, cookies } = locals; %>
// Set up the request
struct evhttp_uri *uri = evhttp_uri_parse("<%= url %>");
struct evhttp_connection *conn = evhttp_connection_base_new(NULL, NULL, evhttp_uri_get_host(uri), evhttp_uri_get_port(uri));
struct evhttp_request *req = evhttp_request_new(NULL, NULL);

// Construct the request URL
char *path = evhttp_uri_get_path(uri);
if(strlen(path) == 0) {
    path = "/";
}

// Set request method and URL
evhttp_request_set_chunked_cb(req, NULL);
evhttp_request_set_error_cb(req, request_error_cb);
evhttp_request_set_cb(req, request_done_cb);
evhttp_request_set_header_cb(req, request_header_cb);
evhttp_request_set_response_cb(req, request_response_cb);
evhttp_request_set_uri(req, path);
evhttp_request_set_type(req, EVHTTP_REQ_<%= method.toUpperCase() %>);

// Add headers to the request
<% headers.forEach(header => { %>
    evhttp_add_header(req->output_headers, "<%= header.name %>", "<%= header.value %>");
<% }) %>

// Add cookies to the request
<% cookies.forEach(cookie => { %>
    evhttp_add_header(req->output_headers, "Cookie", "<%= cookie.name %>=<%= cookie.value %>");
<% }) %>

// Send the request
if (evhttp_make_request(conn, req, EVHTTP_REQ_<%= method.toUpperCase() %>, path) == -1) {
    fprintf(stderr, "Failed to send HTTP request\n");
    return 1;
}

// Handle errors
void request_error_cb(struct evhttp_request *req, void *ctx) {
    fprintf(stderr, "Error: %d %s\n", evhttp_request_get_response_code(req), evhttp_request_get_response_code_line(req));
}

// Handle response headers
void request_header_cb(struct evhttp_request *req, void *ctx) {
    struct evkeyvalq *headers = evhttp_request_get_input_headers(req);
    struct evkeyval *header;
    TAILQ_FOREACH(header, headers, next) {
        fprintf(stdout, "%s: %s\n", header->key, header->value);
    }
}

// Handle response body
void request_response_cb(struct evhttp_request *req, void *ctx) {
    struct evbuffer *buffer = evhttp_request_get_input_buffer(req);
    fprintf(stdout, "%.*s\n", (int)evbuffer_get_length(buffer), evbuffer_pullup(buffer, -1));
}

// Handle completion of the request
void request_done_cb(struct evhttp_request *req, void *ctx) {
    event_base_loopbreak(base);
}
