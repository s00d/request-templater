<% const { url, method, mimeType, headers, postData, cookies } = locals; %>
// Create a new URLRequest object
var request = URLRequest(url: URL(string: "<%- url %>")!)

// Set the request method
request.httpMethod = "<%- method %>"

// Set the request content type header
request.addValue("<%- mimeType %>", forHTTPHeaderField: "Content-Type")

<% if (headers.length > 0) { %>
// Add headers to the request
<% headers.forEach(header => { %>
request.addValue("<%= header.value %>", forHTTPHeaderField: "<%= header.name %>")
<% }) %><% } %>

<% if (cookies.length > 0) { %>
// Add cookies to the request
<% cookies.forEach(cookie => { %>
request.addValue("<%= cookie.value %>", forHTTPHeaderField: "<%= cookie.name %>")
<% }) %><% } %>

<% if (method === 'POST' && postData.length > 0) { %>// Set the request body
<% if (postData.length === 1 && postData[0].type === 'file') { %>
let fileUrl = URL(fileURLWithPath: "/path/to/file")
let data = try Data(contentsOf: fileUrl)
request.httpBody = data
<% } else { %>
let postDataDict = <%=
JSON.stringify(postData.reduce((acc, param) => {
    if (Array.isArray(param.value) || typeof param.value === 'object') {
        acc[param.name] = param.value
    } else {
        acc[param.name] = param.value
    }
    return acc
}, {}))
%>
let postData = postDataDict.map { (key, value) -> String in
let encodedKey = key.addingPercentEncoding(withAllowedCharacters: .alphanumerics) ?? ""
let encodedValue = String(describing: value).addingPercentEncoding(withAllowedCharacters: .alphanumerics) ?? ""
return "(encodedKey)=(encodedValue)"
}.joined(separator: "&")
let postDataEncoded = postData.data(using: .utf8)
request.httpBody = postDataEncoded
<% } %><% } %>

// Create a new URLSession object
let session = URLSession.shared

// Send the request
let task = session.dataTask(with: request) { (data, response, error) in
guard let data = data else { return }
print("Response:", String(data: data, encoding: .utf8)!)
}

task.resume()
