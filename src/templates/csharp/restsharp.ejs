<% const { url, method, mimeType, headers, postData, cookies } = locals; %>
using RestSharp;

class Program
{
    static void Main(string[] args)
    {
        // Construct the request URL
        var fullUrl = "<%= url %>";

        // Set up the request
        var client = new RestClient(fullUrl);
        var request = new RestRequest("<%= method %>", Method.<%= method.toUpperCase() %>);
        <% if (mimeType) { %>request.AddHeader("Content-Type", "<%= mimeType %>");<% } %>

        <% if (headers.length > 0) { %>
        // Add headers to the request
        <% headers.forEach(header => { %>
        request.AddHeader("<%= header.name %>", "<%= header.value %>");
        <% }) %>
        <% } %>

        <% if (cookies.length > 0) { %>
        // Add cookies to the request
        <% cookies.forEach(cookie => { %>
        request.AddCookie("<%= cookie.name %>", "<%= cookie.value %>");
        <% }) %>
        <% } %>

        <% if (postData.length > 0) { %>
        // Set up the request body
        <% if (postData.some(param => typeof param.value === 'object' || Array.isArray(param.value))) { %>
        var body = new {
            <% postData.filter(param => typeof param.value === 'object' || Array.isArray(param.value)).forEach(param => { %>
            <%= param.name %> = <%= JSON.stringify(param.value) %>,
            <% }) %>
        };
        request.AddJsonBody(body);
        <% } else { %>
        request.AddParameter("text/plain", "<%= postData.map(param => param.name + '=' + Uri.EscapeDataString(param.value)).join('&') %>", ParameterType.RequestBody);
        <% } %>
        <% } %>

        // Send the request
        var response = client.Execute(request);

        // Handle the response
        var responseBody = response.Content;
        Console.WriteLine("Response: " + responseBody);

        // Handle errors
        if (response.StatusCode != System.Net.HttpStatusCode.OK)
        {
            Console.WriteLine("Error: " + response.StatusCode + " " + response.StatusDescription);
        }
    }
}
