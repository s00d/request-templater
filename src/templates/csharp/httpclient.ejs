<% const { url, method, mimeType, headers, postData, cookies } = locals; %>
using System;
using System.Net.Http;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        // Construct the request URL
        var fullUrl = "<%= url %>";

        // Set up the request
        var client = new HttpClient();
        var request = new HttpRequestMessage(new HttpMethod("<%= method %>"), fullUrl);
        <% if (mimeType) { %>request.Headers.Add("Content-Type", "<%= mimeType %>");<% } %>

        <% if (headers.length > 0) { %>
        // Add headers to the request
        <% headers.forEach(header => { %>
        request.Headers.Add("<%= header.name %>", "<%= header.value %>");
        <% }) %>
        <% } %>

        <% if (cookies.length > 0) { %>
        // Add cookies to the request
        <% cookies.forEach(cookie => { %>
        var cookie = new System.Net.Cookie("<%= cookie.name %>", "<%= cookie.value %>", "/", "<%= url %>");
        clientHandler.CookieContainer.Add(cookie);
        <% }) %>
        <% } %>

        <% if (postData.length > 0) { %>
        // Set up the request body
        <% if (postData.some(param => typeof param.value === 'object' || Array.isArray(param.value))) { %>
        var formData = new MultipartFormDataContent();
        <% postData.forEach(param => {
            if (Array.isArray(param.value)) { %>
                <% param.value.forEach(val => { %>
                    formData.Add(new StringContent("<%= val %>"), "<%= param.name %>[]");
                <% }) %>
            <% } else if (typeof param.value === 'object') { %>
                <% Object.entries(param.value).forEach(([key, val]) => { %>
                    formData.Add(new StringContent("<%= val %>"), "<%= param.name %>[<%= key %>]");
                <% }) %>
            <% } else { %>
                formData.Add(new StringContent("<%= param.value %>"), "<%= param.name %>");
            <% } %>
        <% }) %>
        request.Content = formData;
        <% } else { %>
        var requestBody = new StringContent("<%= postData.map(param => param.name + '=' + Uri.EscapeDataString(param.value)).join('&') %>");
        request.Content = requestBody;
        <% } %>
        <% } %>

        // Send the request
        var response = await client.SendAsync(request);

        // Handle the response
        var responseBody = await response.Content.ReadAsStringAsync();
        Console.WriteLine("Response: " + responseBody);

        // Handle errors
        if (!response.IsSuccessStatusCode)
        {
            Console.WriteLine("Error: " + response.StatusCode + " " + response.ReasonPhrase);
        }
    }
}
