<% const { url, method, mimeType, headers, postData, cookies } = locals; %>
async function makeRequest(url, method, mimeType, headers, cookies, postData) {
  const xhr = new XMLHttpRequest();

  // Construct the request URL
  const fullUrl = url;

  // Set up the request
  xhr.open(method, fullUrl, true);
  xhr.setRequestHeader('Content-Type', mimeType);

  // Add headers to the request
  headers.forEach(header => {
    xhr.setRequestHeader(header.name, header.value);
  });

  // Add cookies to the request
  cookies.forEach(cookie => {
    document.cookie = `${cookie.name}=${cookie.value}`;
  });

  // Send the request
if (Array.isArray(postData)) {
  if (postData.length > 0) {
    if (postData.some(param => param.type === 'file')) {
      xhr.send(new FormData(document.getElementById('#file_upload_form')));
    } else {
      const encodedParams = postData.map(param => ${param.name}=${encodeURIComponent(param.value)}).join('&');
      xhr.send(encodedParams);
    }
  } else {
    xhr.send();
  }
} else if (typeof postData === 'object' && postData !== null) {
    xhr.send(JSON.stringify(postData));
} else {
  xhr.send();
}

  // Handle the response
  try {
    await new Promise((resolve, reject) => {
      xhr.onreadystatechange = function() {
        if (this.readyState === 4) {
          if (this.status === 200) {
            console.log('Response:', this.responseText);
            resolve(this.responseText);
          } else {
            reject(new Error(`Request failed with status code ${this.status}`));
          }
        }
      };
    });
  } catch (error) {
    console.error('Error:', error.message);
    throw error;
  }
}

// Example usage
const url = '<%= url %>';
const method = '<%= method %>';
const mimeType = '<%= mimeType %>';
const headers = [
  <% headers.forEach(header => { %>{ name: '<%= header.name %>', value: '<%= header.value %>' },<% }) %>
];
const cookies = [
  <% cookies.forEach(cookie => { %>{ name: '<%= cookie.name %>', value: '<%= cookie.value %>' },<% }) %>
];

const postData = <%- JSON.stringify(postData, null, 2) %>

makeRequest(url, method, mimeType, headers, cookies, postData);
