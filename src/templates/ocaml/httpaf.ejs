<% const { url, method, mimeType, headers, postData, cookies } = locals; %>
(* Construct the request URL *)
let fullUrl = "<%= url %>" in
let headers = Httpaf.Headers.of_list [
  "Content-Type", "<%= mimeType %>";
  <% headers.forEach(header => { %>
    "<%= header.name %>", "<%= header.value %>";
  <% }) %>
  <% cookies.forEach(cookie => { %>
    "Cookie", "<%= cookie.name %>=<%= cookie.value %>";
  <% }) %>
] in
let body =
<% if (postData.length > 0) { %>
  (match <%= method %> with
  | "GET" -> ""
  | _ ->
  let postData = [%yojson <%= JSON.stringify(postData) %>] in
  let rec build_body = function
  | Assoc [] -> ""       | Assoc ((name, value) :: xs) ->
  (match value with
  | String s -> name ^ "=" ^ Uri.pct_encode s         | Int i -> name ^ "=" ^ string_of_int i
  | Bool b -> name ^ "=" ^ string_of_bool b         | List l ->
  let body_list = List.map (fun x -> ("", x)) l in
  build_body (Assoc body_list)         | Assoc a ->
  let body_list = List.map (fun (key, value) -> (name ^ "[" ^ key ^ "]", value)) a in
  build_body (Assoc body_list))         ^ (if xs = [] then "" else "&" ^ build_body (Assoc xs))
  | _ -> failwith "Invalid post data format"
  in build_body postData)
<% } else { %>
  ""
<% } %>
in
  let req = Httpaf.Request.create
  ~headers
  (Httpaf.Method.of_string "<%= method %>")
  (Uri.of_string fullUrl)
  body
in

(* Send the request *)
let conn = Httpaf_lwt_unix.Client.create_connection (Uri.host_with_default ~default:"localhost" (Uri.of_string fullUrl)) in
let%bind () = Httpaf_lwt_unix.Client.write_request conn req in
let%bind resp = Httpaf_lwt_unix.Client.read_response conn in

(* Handle the response *)
let%bind body = Httpaf_lwt.Body.to_string resp.body in
print_endline ("Response: " ^ body);

(* Handle errors *)
let error_handler exn =
  match exn with
  | Unix.Unix_error (Unix.ENETUNREACH, _, _) ->
    print_endline "Error: Network is unreachable"
  | Unix.Unix_error (Unix.ECONNREFUSED, _, _) ->
    print_endline "Error: Connection refused"
  | _ ->
    Printf.eprintf "Error: %s\n" (Printexc.to_string exn);
    exit 1
in
Lwt.catch (fun () -> body) error_handler >>= fun _ -> Lwt.return_unit
