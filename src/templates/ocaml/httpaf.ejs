<% const { url, method, mimeType, headers, postData, cookies } = locals; %>
(* Construct the request URL *)
let fullUrl = "<%= url %>" in

(* Set up the request *)
let headers = Cohttp.Header.of_list [
  "Content-Type", "<%= mimeType %>";
  <% headers.forEach(header => { %>
  "<%= header.name %>", "<%= header.value %>";
  <% }) %>
  <% cookies.forEach(cookie => { %>
  "Cookie", "<%= cookie.name %>=<%= cookie.value %>";
  <% }) %>
] in
let body =
  <% if (postData.length > 0) { %>
  (match <%= method %> with
  | "GET" -> ""
  | _ -> "<%= postData.map(param => param.name + '=' + encodeURIComponent(param.value)).join('&') %>")
  <% } else { %>
  ""
  <% } %>
in
let req = Httpaf.Request.create
  ~headers:(Httpaf.Headers.of_list (Cohttp.Header.to_list headers))
  (Httpaf.Method.of_string "<%= method %>")
  (Uri.of_string fullUrl)
  body
in

(* Send the request *)
let conn = Httpaf_lwt_unix.Client.create_connection (Uri.host_with_default ~default:"localhost" (Uri.of_string fullUrl)) in
let%bind () = Httpaf_lwt_unix.Client.write_request conn req in
let%bind resp = Httpaf_lwt_unix.Client.read_response conn in

(* Handle the response *)
let%bind body = Httpaf_lwt.Body.to_string resp.body in
print_endline ("Response: " ^ body);

(* Handle errors *)
let error_handler = function
  | Unix.Unix_error (Unix.ENETUNREACH, _, _) ->
      print_endline "Error: Network is unreachable"
  | Unix.Unix_error (Unix.ECONNREFUSED, _, _) ->
      print_endline "Error: Connection refused"
  | exn ->
      Printf.eprintf "Error: %s\n" (Printexc.to_string exn);
      exit 1
in
Lwt.catch (fun () -> body) error_handler;
