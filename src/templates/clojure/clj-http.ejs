<%
    // Extract parameters from the options object
    const { url, method, mimeType, headers, postData, cookies } = locals;
%>

(require '[clj-http.client :as client])

(defn make-request []
  (let [url "<%= url %>"
        headers {<% headers.forEach(header => { %>
                 "<%= header.name %>" "<%= header.value %>"<% if (!header.isLast) { %>,<% } %><% }) %>}
        cookies {<% cookies.forEach(cookie => { %>
                 "<%= cookie.name %>" "<%= cookie.value %>"<% if (!cookie.isLast) { %>,<% } %><% }) %>}
        options {:headers headers
                 :cookies cookies
                 :content-type "<%= mimeType %>"}
        <% if (method === 'GET') { %>
        response (client/get url options)]
        <% } else { %>
        post-data "<% if (postData.length === 1 && postData[0].type === 'file') { %>
                    {:multipart true
                     :file "<%= postData[0].value %>"}
                    <% } else { %>
                    {<% postData.forEach(param => { %>
                     "<%= param.name %>" "<%= param.value %>"<% if (!param.isLast) { %>,<% } %><% }) %>}
                    <% } %>"
        response (client/post url options post-data)]
        <% } %>
    (println (str "<%= method %> " url " HTTP/1.1"))
    (doseq [entry headers]
      (println (str entry)))
    (doseq [entry cookies]
      (println (str "Cookie: " entry)))
    (when (not (empty? post-data))
      (println (str post-data)))
    (println (str "\nResponse: " (:body response)))))

(make-request)
