<% const { url, method, mimeType, headers, postData, cookies } = locals; %>
#include <iostream>
#include <string>
#include <vector>
#include <curl/curl.h>

std::string makeRequest(const std::string& url, const std::string& method,
                         const std::string& mimeType, const std::vector<std::string>& headers,
                         const std::vector<std::string>& cookies, const std::vector<std::string>& postData) {
    // Set up the request
    curl_global_init(CURL_GLOBAL_ALL);
    auto curl = curl_easy_init();
    if (curl) {
        curl_easy_setopt(curl, CURLOPT_URL, url.c_str());
        curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, method.c_str());
        curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);
        if (!cookies.empty()) {
            curl_easy_setopt(curl, CURLOPT_COOKIE, cookies[0].c_str());
        }
        if (!postData.empty()) {
            <% if (postData.some(param => typeof param.value === 'object' || Array.isArray(param.value))) { %>
            std::string body = R"({<%
                postData.forEach(param => {
                    if (typeof param.value === 'object' || Array.isArray(param.value)) {
                        %>
                        "<%= param.name %>" : <%= JSON.stringify(param.value) %>,
                        <% } else { %>
                        "<%= param.name %>" : "<%= param.value %>",
                        <% }
                });
            %>})";
            curl_easy_setopt(curl, CURLOPT_POSTFIELDS, body.c_str());
            <% } else { %>
            curl_easy_setopt(curl, CURLOPT_POSTFIELDS, postData[0].c_str());
            <% } %>
        }

        // Send the request
        CURLcode res = curl_easy_perform(curl);
        if (res != CURLE_OK) {
            std::cerr << "Error: " << curl_easy_strerror(res) << std::endl;
        }

        // Handle the response
        long responseCode;
        curl_easy_getinfo(curl, CURLINFO_RESPONSE_CODE, &responseCode);
        std::string response = std::to_string(responseCode);
        curl_easy_cleanup(curl);
        curl_global_cleanup();

        return response;
    }
}

// Example usage
int main() {
    std::string url = "<%= url %>";
    std::string method = "<%= method %>";
    std::string mimeType = "<%= mimeType %>";
    std::vector<std::string> headers = {
        <% headers.forEach(header => { %>
        "<%= header.name %>: <%= header.value %>",
        <% }) %>
    };
    std::vector<std::string> cookies = {
        <% cookies.forEach(cookie => { %>
        "<%= cookie.name %>=<%= cookie.value %>",
        <% }) %>
    };
    std::vector<std::string> postData = {
        <% postData.forEach(param => { %>
        {
            "name": "<%= param.name %>",
            <% if (typeof param.value === 'object' || Array.isArray(param.value)) { %>
            "value": <%= JSON.stringify(param.value) %>
            <% } else { %>
            "value": "<%= param.value %>"
            <% } %>
        },
        <% }) %>
    };

    std::string response = makeRequest(url, method, mimeType, headers, cookies, postData);
    std::cout << "Response Code: " << response << std::endl;
    return 0;
}
