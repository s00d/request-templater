<% const { url, method, mimeType, headers, postData, cookies } = locals; %>
import 'package:http/http.dart' as http;

Future<String> makeRequest(String url, String method, String mimeType,
                           Map<String, String> headers, Map<String, String> cookies,
                           List<Map<String, dynamic>> postData) async {
  // Construct the request
  final request = http.Request(method, Uri.parse(url));
  request.headers.addAll(headers);

  // Add cookies to the request
  cookies.forEach((name, value) {
    request.cookies.add(Cookie(name, value));
  });

  // Add post data to the request
  if (postData.isNotEmpty) {
    if (postData.length == 1 && postData[0]['type'] == 'file') {
      // Handle file upload
      final fileUploadRequest = http.MultipartRequest(method, Uri.parse(url));
      postData.forEach((param) async {
        if (param['type'] == 'file') {
          fileUploadRequest.files.add(await http.MultipartFile.fromPath(param['name'], param['value']));
        } else {
          fileUploadRequest.fields[param['name']] = param['value'];
        }
      });
      final response = await fileUploadRequest.send();
      final responseBody = await response.stream.bytesToString();
      return responseBody;
    } else {
      // Handle regular post data
      final postDataString = postData.map((param) => '${param['name']}=${Uri.encodeComponent(param['value'])}').join('&');
      request.body = postDataString;
      request.headers['Content-Type'] = mimeType;
      final response = await request.send();
      final responseBody = await response.stream.bytesToString();
      return responseBody;
    }
  } else {
    // Handle GET request
    final response = await request.send();
    final responseBody = await response.stream.bytesToString();
    return responseBody;
  }
}

// Example usage
void main() async {
  final url = '<%= url %>';
  final method = '<%= method %>';
  final mimeType = '<%= mimeType %>';
  final headers = {
    <% headers.forEach(header => { %>
    '<%= header.name %>' : '<%= header.value %>',
    <% }) %>
  };
  final cookies = {
    <% cookies.forEach(cookie => { %>
    '<%= cookie.name %>' : '<%= cookie.value %>',
    <% }) %>
  };
  final postData = [
    <% postData.forEach(param => { %>
    {
      'name': '<%= param.name %>',
      'value': '<%= param.value %>',
      'type': '<%= param.type %>'
    },
    <% }) %>
  ];

  final response = await makeRequest(url, method, mimeType, headers, cookies, postData);
  print('Response: $response');
}
