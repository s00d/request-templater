<% const { url, method, mimeType, headers, postData, cookies } = locals; %>
local http = require("socket.http")
local ltn12 = require("ltn12")

-- Extract parameters from the options object
local url = '<%= url %>'
local method = '<%= method %>'
local mimeType = '<%= mimeType %>'
local headers = {
<% headers.forEach(header => { %>
    ['<%= header.name %>'] = '<%= header.value %>',
<% }) %>
}
local postData = {
<% postData.forEach(param => { %>
    ['<%= param.name %>'] = <% if (Array.isArray(param.value)) { %>
    {
    <% param.value.forEach((val, index) => { %>
    <% if (typeof val === 'object') { %>
        ['<%= Object.keys(val)[0] %>'] = <%= JSON.stringify(val[Object.keys(val)[0]]) %>,
    <% } else { %>
        <%= index %> = '<%= encodeURIComponent(val) %>',
    <% } %>
    <% }) %>
    },
    <% } else if (typeof param.value === 'object') { %>
    {
    ['<%= Object.keys(param.value)[0] %>'] = <%= JSON.stringify(param.value[Object.keys(param.value)[0]]) %>,
    },
    <% } else { %>
    '<%= encodeURIComponent(param.value) %>',
    <% } %>
<% }) %>
}
local cookies = {
<% cookies.forEach(cookie => { %>
    ['<%= cookie.name %>'] = '<%= cookie.value %>',
<% }) %>
}

-- Construct the request table
local request = {
url = url,
method = method,
headers = headers,
source = nil,
sink = ltn12.sink.table(),
}
if method == "POST" then
    request.source = postData
end

-- Add cookies to the request headers
local cookieHeader = ""
for cookie, value in pairs(cookies) do
cookieHeader = cookieHeader .. cookie .. "=" .. value .. "; "
end
if cookieHeader ~= "" then
request.headers['Cookie'] = string.sub(cookieHeader, 1, -3)
end

-- Send the request
local response = ""
local result, code, response_headers, status = http.request(request)
if result then
response = table.concat(request.sink)
end

-- Print the response
print(response)
